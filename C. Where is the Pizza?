import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.StringTokenizer;

public class Main {
	static final PrintWriter pw = 
			new PrintWriter(new OutputStreamWriter(System.out), true);
	
	public static void main(String[] args){
		int num;
		FastReader scan = new FastReader();
		
		num = scan.nextInt();
		
		for(int i=0;i<num;i++) {
			HashMap<Integer, Boolean> visited = new HashMap<>();
			HashMap<Integer, Integer> indexOf = new HashMap<>();
			
			int n= scan.nextInt();
			
			int[] a = new int[n];
			int[] b = new int[n];
			int[] c = new int[n];
			
			for(int j=0;j<n;j++) {
				a[j] = scan.nextInt();
				indexOf.put(a[j], j);
			}
			
			for(int j=0;j<n;j++) {
				b[j] = scan.nextInt();
			}
			
			for(int j=0;j<n;j++) {
				c[j] = scan.nextInt();
			}
			
			int cnt = 0;
			for(int j=0;j<n;j++) {
				int cursor = j;
				
				int sz = 0;
				boolean fixed = false;
				
				while(visited.get(a[cursor]) == null) {
					if(c[cursor] != 0) {
						fixed = true;
					}
					
					visited.put(a[cursor], true);
					cursor = indexOf.get(b[cursor]);
					sz++;
				}
				
				if(sz >= 2 && !fixed) {
					cnt++;
				}
			}
			
			pw.println(getAns(cnt));
		}
	}
	
	public static long getAns(int n) {
		if(n == 0) {
			return 1;
		}
		else if(n == 1) {
			return 2;
		}
		
		long ans = (getAns(n / 2) * getAns(n / 2)) % 1_000_000_007;
		
		if(n % 2 == 1) {
			ans = (ans * 2) % 1_000_000_007;
		}
		
		return ans;
	}
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
      br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
      while (st == null || !st.hasMoreElements()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (IOException  e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() {
      return Integer.parseInt(next());
    }

    long nextLong() {
      return Long.parseLong(next());
    }

    double nextDouble() {
      return Double.parseDouble(next());
    }

    String nextLine() {
      String str = "";
      try {
        str = br.readLine();
      } catch (IOException e)  {
        e.printStackTrace();
      }
      return str;
    }
  }
