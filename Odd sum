import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {
	static final PrintWriter pw = 
			new PrintWriter(new OutputStreamWriter(System.out), true);
	static final FastReader reader = new FastReader();
	
	static int questionMarks = 0;
	
	public static void main(String[] args){
		int num = reader.nextInt();
		
		int positiveOddCount = 0, negativeOddCount = 0;
		long positiveOddSum = 0;
		int largestNeg = (int)-1e4 - 1, smallestPos = (int)1e4 + 1;
		
		long ans = 0;
		for(int i=0;i<num;i++) {
			int x = reader.nextInt();
			
			if(Math.abs(x) % 2 == 1) {
				if(x > 0) {
					positiveOddCount++;
					positiveOddSum += x;
					
					smallestPos = Math.min(smallestPos, x);
				}
				else if(x < 0) {
					negativeOddCount++;
					
					largestNeg = Math.max(largestNeg, x);
				}
			}
			else if(x > 0){
				ans += x;
			}
		}
		
		if(positiveOddCount % 2 == 1) {
			System.out.print(ans + positiveOddSum);
		}
		else if(smallestPos == 1e4 + 1) {
			System.out.print(ans + largestNeg);
		}
		else if(largestNeg == -1e4 - 1) {
			System.out.print(ans + positiveOddSum - smallestPos);
		}
		else if(smallestPos > -largestNeg) {
			System.out.print(ans + positiveOddSum + largestNeg);
		}
		else {
			System.out.print(ans + positiveOddSum - smallestPos);
		}
	}
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
      br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
      while (st == null || !st.hasMoreElements()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (IOException  e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() {
      return Integer.parseInt(next());
    }

    long nextLong() {
      return Long.parseLong(next());
    }

    double nextDouble() {
      return Double.parseDouble(next());
    }

    String nextLine() {
      String str = "";
      try {
        str = br.readLine();
      } catch (IOException e)  {
        e.printStackTrace();
      }
      return str;
    }
  }
