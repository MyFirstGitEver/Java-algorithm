import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Objects;
import java.util.PriorityQueue;
import java.util.SortedSet;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.TreeSet;

public class Main {
	static final PrintWriter pw = 
			new PrintWriter(new OutputStreamWriter(System.out), true);
	static final FastReader reader = new FastReader();
	static long[][] list;
	
	public static void main(String[] args){
		int n,m;
		
		n = reader.nextInt();
		m = reader.nextInt();
		
		HashMap<Integer, TreeSet<Edge>> query = input(n, m);
		int[] prev = new int[n + 1];
		Arrays.fill(prev, -1);
		
		long[] dist = new long[n + 1];
		Arrays.fill(dist, Long.MAX_VALUE);
		
		PriorityQueue<Position> q = new PriorityQueue<>();
		q.add(new Position(1, 0));
		dist[1] = 0;
		
		while(!q.isEmpty()) {
			Position position = q.peek();
			q.remove();
			
			if(query.get(position.id) != null) {
				SortedSet<Edge> list = query.get(position.id);
				for(Edge e : list) {
					if(dist[e.id] > position.dist + e.weight) {
						dist[e.id] = position.dist + e.weight;
						prev[e.id] = position.id;
						
						q.add(new Position(e.id, dist[e.id]));
					}
				}
			}
		}
		
		int curr = n;
		
		Stack<Integer> ans = new Stack<>();
		while(curr != -1) {
			ans.add(curr);
			
			if(curr == 1) {
				break;
			}
			curr = prev[curr];
		}
		
		if(curr == 1) {
			while(!ans.isEmpty()) {
				System.out.print(ans.peek() + " ");
				ans.pop();
			}
		}
		else {
			System.out.print(-1);
		}
	}
	
	public static HashMap<Integer, TreeSet<Edge>> input(int n, int m){
		HashMap<Integer, TreeSet<Edge>> query = new HashMap<>();
		
		for(int i=0;i<m;i++) {
			int u,v;
			long w;
			
			u = reader.nextInt();
			v = reader.nextInt();
			w = reader.nextLong();
			
			if(u == v)
				continue;
			
			if(query.get(u) == null) {
				query.put(u, new TreeSet<>());
			}
			
			if(query.get(v) == null) {
				query.put(v, new TreeSet<>());
			}
			
			query.get(u).add(new Edge(v, w));
			query.get(v).add(new Edge(u, w));
		}
		
		return query;
	}
}

class Position implements Comparable<Position>{
	public final int id;
	public final long dist;
	
	public Position(int id, long dist) {
		this.id = id;
		this.dist = dist;
	}

	@Override
	public int compareTo(Position o) {
		if(dist < o.dist) {
			return -1;
		}
		else if(dist == o.dist) {
			return 0;
		}
		else {
			return 1;
		}
	}
}

class Edge implements Comparable<Edge>{
	public final int id;
	public final long weight;
	
	public Edge(int id, long weight) {
		this.id = id;
		this.weight = weight;
	}

	@Override
	public int compareTo(Edge o) {
		return id - o.id;
	}
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
      br = new BufferedReader(new InputStreamReader(System.in));
    }

    String next() {
      while (st == null || !st.hasMoreElements()) {
        try {
          st = new StringTokenizer(br.readLine());
        } catch (IOException  e) {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() {
      return Integer.parseInt(next());
    }

    long nextLong() {
      return Long.parseLong(next());
    }

    double nextDouble() {
      return Double.parseDouble(next());
    }

    String nextLine() {
      String str = "";
      try {
        str = br.readLine();
      } catch (IOException e)  {
        e.printStackTrace();
      }
      return str;
    }
  }
